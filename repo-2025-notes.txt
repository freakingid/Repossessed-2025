20250410

TEST * Spawners cannot be shot with Player Bullet.
** Note, we put the root Spawner nodes into "damageable" group and I'm not sure that's correct. YES it is correct.

TODO * Pool Player Bullets

TODO * Pool Enemy Arrows

LATER * Pool Enemy Lobber shots, Spider webs, other things they throw

LATER * Pool Shrapnel

DONE * Fixed and refactored some issues with Bat Enemy.

DONE * Spawners fix error and add despawn signal with data to log

</quote>
Optional Add-ons for Spawner stats building
Want to:
1. Track average lifespan per spawner?
2. Delay spawns if enemies die too quickly (anti-spawn-spam)?
3. Trigger special events based on enemy death cause?

We can build on this easily with internal metrics.

Let me know if you'd like to log enemy lifespans in a per-spawner array or roll up some real-time stats!
</quote>

DONE * All enemies can be placed in the scene without error and pursue player, and SkeletonShooter fires arrows. Current enemies are:
Ghost, Skeleton, SkeletonShooter, Zombie, Bat
** All enemies can be shot by the Player Bullet, also, and they die, and spawn gems based on their power.

DONE * Spawners for Ghost, Skeleton, SkeletonShooter, Zombie, and Bat are wired up with Object Pooling. We are using Constants from Global.gd to set both the maximum number of each enemy type (in BaseSpawner) and the number of objects put into the pool (in LevelManager)

DONE * Add SkeletonSpawner and Skeleton with Pooling

BUG * Skeleton Enemy can get stuck in corners

BUG * Some enemies, if they make contact directly with the player, seem to stick to the player wherever the player moves after that.

BUG * SkeletonShooter movement behavior needs refined a bit. They stop movement at odd times.

=====
<quote>
Would you like help with:
NavigationAgent2D integration?
Refactoring Skeleton‚Äôs spawner scene?
Adding custom pathing like obstacle avoidance or side-stepping?
</quote>

üí• Adding death animations or hit flash visuals
üéØ Setting up spawn waves, limits, or conditional triggers

<quote>
üî≠ Here are some good next steps, depending on your goals:

üß† 2. Add visual feedback to BaseEnemy
* Flash red on hit (modulate)
* Spawn particles or blood splats

üß™ 3. Set up a DebugSpawner scene
* Spawn any enemy on demand with a hotkey
* Great for testing AI, pooling, or combat balance
* Nice to have during iteration or level design.

üß∞ 4. Create a "ReusableEnemySpawner" prefab
* A fully wired-up spawner scene that can be dropped anywhere
* Inspector config only (no custom scripts needed)

Good if level design is picking up and you want less wiring overhead.

=====
If you'd like to keep momentum, next great steps could include:
üîÅ Converting another enemy (e.g. Skeleton) to the pooling system
üí• Adding death animations or hit flash visuals
üéØ Setting up spawn waves, limits, or conditional triggers
üõ†Ô∏è Auto-adding enemies to groups based on is_flying (or other traits)




TODO * Add Crate_Static, Crate_Carried

TODO * Add Barrel_Static, Barrel_Carried, Barrel_Rolled









========================================
20250409
** Today we are doing a bunch of "Refactoring" because that seems to be what ChatGPT tries to do whenever I enter a new chat and try to preserve context. It all sounds useful, but some things might have been stripped out when cgpt was trying to update the wrong Canvas documents, just FYI.

DONE * Arrows sometimes launch with a spint

DONE * Arrows collide with walls and then do the weird vibration bounce

DONE * Move to a new ChatGPT window

WORKING * Add Enemy Spawners for Ghost, Skeleton, SkeletonShooter
** Currently, they all derive from base class "BaseSpawner.gd"
** GhostSpawner, SkeletonSpawner, SkeletonShooterSpawner
** We added stuff for object pooling

DONE * Add Ghost Spawner and Ghost, with Pooling

TODO * Add Enemy Spawners for Ghost, Skeleton, SkeletonShooter
** Currently, they all derive from base class "BaseSpawner.gd"
** GhostSpawner, SkeletonSpawner, SkeletonShooterSpawner

TODO * Add Crate_Static, Crate_Carried

TODO * Add Barrel_Static, Barrel_Carried, Barrel_Rolled








=============================================
20250408
DONE * Ghost is not doing any melee damage when touching Player

DONE * Player cannot actually shoot any bullets.

DONE * Add Skeletons to the game and test.
** This still needs improved, because Skeletons can get stuck on corners sometimes, but we are going to move on.

DONE b. Random velocity for Ghosts to spread out. I think this is different than random speed?

TODO * Fix the Design Documents. We saved at the beginning of 04082025, but I think ChatGPT has screwed them up somehow. In a dedicated chat that still understands Godot 4.3, we can ask cgpt to combine the documents.

LATER a. Random speed for ghosts
** This is just my simple idea








=================================================
20250407
* Working on a refactor.

TEST * Step 3: Refactor bullet logic (next session)
Start rewriting Bullet.gd and Arrow.gd using the new architecture?

DONE * Enemy Base
** We say done here, but it may be ongoing as we work on other enemies.

WORK * Ghost

More ChatGPT Ghost movement ideas:
---

### üÖ± Use separation logic (like boids/steering)
If you want smarter avoidance between enemies, you can:
- Detect nearby enemies using `get_overlapping_bodies()`
- Calculate repulsion force or steering angle away from them
- Combine that with the direction toward the player

More complex, but more fluid.

---

### ‚úÖ Recommendation
Start with Option üÖ∞ and see if that feels good. It's easy and often enough.

Would you like me to patch that random offset version into `BaseEnemy.gd` for `move_directly_to_player()` in the Canvas doc?
</quote>






TODO * Get Player shots working

TODO * Skeleton

TODO * Skeleton Shooter

TODO * Get Skeleton Shooter firing working

TODO * Ghost Spawner

TODO * Skeleton Spawner

TODO * Skeleton Shooter Spawner

TODO * Step 4: Clean crate/barrel interaction logic
After bullet cleanup, we‚Äôll formalize barrel/crate reactivation and pickup/drop into reusable patterns.








========================================
20250402
TODO * Add shrapnel behavior on barrel explosion.

DONE * I did not see the explosion. Maybe a z_index issue? Or something else
** This was a z_index issue.
DONE * Shrapnel is spawned, but it is spawned over and over.
** The ShrapnelTimer did not have "one_shot" flag set.
DONE * Shrapnel seems to have gravity and fall towards the bottom of the screen.

BUG * It seems like skeleton shooters might always be firing 2 arrows at a time. Test further.

BUG * When player died, it seems like the camera made a huge shift down to the lower-right corner of the level.

TODO * Include screen shake upon barrel explosion.








===================================================
20250401

DONE * Show flames on barrels at various levels of damage and make sure health / flame crosses over when barrels transition to different types of barrels. Damage levels should be as follows:
100% to 90% health = no flames
90% to 70% = small red flames
70% to 50% = medium red flames
50% to 30% = large yellow flames
30% to 0% = huge white-yellow flames

DONE * When Barrel_Carried is kicked and becomes Barrel_Rolled, it takes a bit too long to turn back into Barrel_Static. One problem with this is that while it is Barrel_Rolled, it might appear to be standing still, but it has not yet turned back into Barrel_Static, so when the player tries to pick it up, the Barrel is kicked again instead. I just removed the "amount of time the barrel should roll," because I want us to just pay attention to when the Barrel Roll is almost done moving.
Then we increased the linear_velocity.length_squared() check so if we're moving < 8 speed we are considered to be stopped.

DONE * Check Enemy arrows against walls, crates, barrels
DONE * Enemy Arrows pass right through Barrel_Static
** Needed the layer_barrel added to Collision Layer
DONE * Enemy Arrows pass right through Barrel_Carried, damage the Player who is carring the Barrel_Carried, but then oddly the arrows ricochet off of that Player. Normally, the arrows should exchange damage with the Player and then either be removed (if Arrow health is < 1) or continue on straight.
** Needed the layer_barrel added to Collision Layer
DONE * Enemy Arrows transfer momentum to Barrel_Rolled, but they should not. Arrows are not supposed to have enough mass to cause a change in velocity to a Barrel.
** We needed to disable physics collisions between Barrel_Rolled and Arrow. This seems like a nasty hack since it requires every new arrow to tell every existing Barrel_Rolled to ignore that new Arrow. It works for now.

TODO * Check behavior of multiple barrels colliding and pushing each other.

TODO * How do we create multiple rooms in our game?
a. Player properties such as score, health, current powerups, etcetera should all carry over between levels.
b. Eventually, we will want the status of levels to be saved, so if the player reenters those levels later, they will contain the same objects, enemies, and so forth, in the same conditions as they were when the player last left the room.
c. We will use a simple door node / sprite to move from one level to the next.

BUG * Player bullets with Bounce powerup do not properly bounce off of walls. They make contact with the wall and then do that funky vibrating thing.

LATER * It seems like more functions could be handled from BarrelUtils.gd for Barrel_Statid, Barrel_Rolled, and Barrel_Carried. Check it out.

TODO * Player jumping over crate placed in front of them while they are running.
** We are almost there, maybe accidentally. But the z_index of player shows them underneath the dropped barrel. Fix that, and make player sprite grow larger as it "jumps" and grow smaller as it "lands"

TODO * How much damage do we want barrel to do to bullets?

BUG * When enemies do not actually change position, their sprites need to stop animation. That is, show an idle animation (which we do not have yet.)

BUG * When enemies are trying to get to the player but choose to move backwards, they need to change sprite direction so it looks like they are actually going backwards. Right now, they continue to look at the player, so it looks like they are backpedaling.

BUG * Carried Crate should not be allowed to push over a Static Crate. I think this is similar to the Carried Crate not being blocked by walls.

TODO * Player animation and Carried Crate need updated to show better animation of Player carrying Crate

TODO * I think the Big Shot powerup is not actually altering the size of the Shot, so we cannot actually see that we have the big shot.

TODO * Refactor how BaseEnemy and other Enemies set up _ready and stuff
<quote>
üõ† Recommended Refactor Strategy

‚úÖ Add this to BaseEnemy.gd:
```
func _ready():
	if player:
		player.melee_hit.connect(_on_player_melee_hit)
	set_stats()
	sprite.z_index = Global.Z_BASE_ENEMIES

func set_stats():
	# Default stats ‚Äî override in child classes if needed
	health = 3
	speed = 25.0
	damage = 1
	score_value = 0
```

‚úÖ In child classes (e.g., Zombie.gd, Ghost.gd):
Simplify like this:
```
func set_stats():
	health = Global.ZOMBIE.HEALTH
	speed = Global.ZOMBIE.SPEED
	damage = Global.ZOMBIE.DAMAGE
	score_value = Global.ZOMBIE.SCORE
```
No need to override _ready() unless doing something else special.
</quote>

TODO * See if we can parent > Child Barrels to keep DRY

TODO * Barrel Flames: Would you like help cleaning that up into a small shared set_barrel_state() method you can reuse across all transitions?

TODO * Simplify is_carried_crate in Player.gd
** We don't really need that boolean. We can just test the variable that is to hold the carried crate instance for == null

TODO * Carried Crate z-index looks odd going left and right

TODO * Check properties in Player.gd vs Bullet.gd that seem to be redundant.

TODO * Check properties in SkeletonShooter.gd vs Arrow.gd that seem to be redundant.

TODO * If Player is firing already when they contact a Crate_Static, the Crate_Static should not be picked up by the player. The crate should at that point be like a wall to the player, blocking their movement.

TODO * Check for redundant, double effects when 2 objects collide: Only 1 object should manage damage, for example.

BUG * Crate_Carried does not seem to collide with walls

TEST * While carrying a crate, sometimes the player and the crate end up moving downward automatically. I noticed this if I try to push an enemy (like a Ghost) down. The push works great, but when I let go of the controls, the Player and the Crate continue moving downward, while I would expect them to stop moving.

‚úÖ Reactivation/pooling system for Crate_Static

LATER * Crate dropping behavior details
```
Block drop if a wall or object is in the way
Spawn a small drop animation or sound
Implement a fallback if no valid space is found
```

========================================================
== NOTES On Barrel and Crate Pickups
=========================================================
# Picking up a Crate or Barrel
Player _on_PickupDetector_body_entered
* Make sure we are not carrying a barrel or a crate already.
* Make sure drop cooldown timer has passed
* Get instance to the item to be picked up
* Call "pickup(self::Player)" on the item to be picked up (Crate Static or Barrel Static)

Barrel_Static pickup(player)
* Become invisible and deactivate physics, for Static
* Get instance to the Barrel Carried
* Setup flame and health on that instance
* we're good

Player _physics_process
* Handles input, firing input checks for carried objects, calls drop_crate() or drop_barrel() if needed.
* drop_barrel():
** Decides if we should drop or place barrel, based on player's velocity.

DONE * Seems like maybe health is not getting transferred all the time when switching barrel types.

DONE * Yes, bullets are being fired when releasing a Barrel Carried, and we do not want that.
** Setting timer to make bullets wait isn't working. Could troubleshoot that but it makes more sense to tell the Barrel to not care about bullet collisions for a short period of time with a Timer when the Barrel Static or Barrel Rolled is first instantiated.

DONE * Why do the barrels start out with flames already??

LATER * See if we can improve the way Barrel_Rolled avoids getting momentum added by Arrow.
** We needed to disable physics collisions between Barrel_Rolled and Arrow. This seems like a nasty hack since it requires every new arrow to tell every existing Barrel_Rolled to ignore that new Arrow. It works for now.
** ChatGPT gave us an idea. I had it write a summary that we could present in a different chat at a later time to try efficient solution. That summary is "Enemy Arrows Push Rolling Barrels" in the "Repossessed 2025" folder of "Game Projects" in Google Drive.
https://docs.google.com/document/d/1KjGnxEASNrOPFPeJFELTTnXAFlhKHpkn_EUkjkWbndc/edit?usp=drive_link








==================================================
20250331
DONE * Barrel Carried does not have all the properties and such we need for taking damage, etc.

DONE * Player bullets with Bounce powerup do not properly bounce off of walls. They make contact with the wall and then do that funky vibrating thing, moving chaotically from side to side along the length of the wall, until the bullet's lifespan has expired and the bullet is destroyed.








20250328
DONE * Add barrels
** Barrel next steps, according to ChatGPT:
‚úÖ Next steps
Let me know if you want to:

* Start building the Barrel_Static.tscn and Barrel_Carried.tscn
* Implement the Barrel_Rolled physics-based drop and motion
* Define the Shrapnel scene and damage logic
* Set up the flame health indicator overlay
* Create the signal/event pipeline for explode()
**

DONE * rolling barrels hit by bullets are pushed along by the bullets. Bullets should not add to motion of barrels, because bullets have so little mass.
** The rolling barrels are also too bouncy off other things. bouncing can sometimes even increase speed.

DONE * we made some changes to Bullets so they would not move Barrel_Rolled when hit. However, now the bullets stick to the side of Crate_Static -- and old problem we recently fixed.

DONE * Barrel_Static is not getting collisions with Player Bullets.
** and lets test for others.

DONE * pickup, carry, and drop barrels

DONE * make dropped barrels roll

DONE * when player is moving down, kicking barrel sends it to the left









20250327
DONE * Use globals, maybe some sort of dictionary, for object properties that need leveling
** These are in Global.gd. which is autoloaded for the project.

DONE * Nova Shot does not harm Bat

DONE * Make Crate larger

DONE * Fix Crate_Carried draw order with player directions.
** Z-index set in code correctly, but the Player had z_index set to 10 in inspector, and zindex is set to relative, and we were changing Player > Sprite2D zindex, so things were off.

DONE * Test player carrying crate that gets hit by enemy arrows.
** Arrows bounce as expected

DONE * HUD is covered by Crate
** Assigned Player.HealthBar a z_index

DONE * Adjust Y placement of Carried Crate because now it is larger and covering the player's face.

DONE * Make player carrying crate walk a little slower.
DONE * Adding player animated sprites
DONE * Add ghost animated sprites
DONE * Add skeleton animated sprites
DONE * Add skeleton shooter animated sprites
DONE * Add zombie animated sprites
DONE * Add bat animated sprites

NOTE * Animation sprite sheet top to bottom:
1 South
2 South East

3 East
4 North East

5 North
6 South West

7 West
8 North West


=================================================
* Add More enemies
=================================================
** Bats
** ChatGPT asks:
```
Want bats to have a death animation?
Want a special effect when bats dash?
** I could see a streak behind the bat, like to imply a blur because the bat suddenly made a beeline for a person.
```

* Add Lobber and shots

* The gems need a slight magnetic effect, so as the player gets close to the gem, the gem moves towards the player. Once the player is within range of a gem (pretty close) the gem moves towards the player faster the closer the player is to the gem. There will later be a powerup that gives the player a magnet, which extends the range at which the gems begin to move towards the player.

* Consider how long each powerup should stay with the player. Do they time out? Or do they wear out after so many uses? Or something else??

==============================================
## Animations
==============================================
* Player sprite animation speed options ChatGPT mentioned for different styles.
üîÅ Alternate clamp examples

### üéÆ Option 1: Smoother walk cycle for slower movement
```
sprite.speed_scale = clamp(actual_speed / max_speed, 0.75, 1.5)
```
Prevents animation from ever becoming too slow
Keeps all animation within a more natural range
Good for pixel art games that look weird when walking is too slow

### üê¢ Option 2: Emphasize slower speeds dramatically
```
sprite.speed_scale = clamp(actual_speed / max_speed, 0.2, 2.0)
```
You‚Äôll really see when the player is slowed down (e.g., stunned or carrying something)
More exaggerated look ‚Äî could match a cartoony or more expressive style

### ‚ö° Option 3: Minimal variation
```
sprite.speed_scale = clamp(actual_speed / max_speed, 0.9, 1.1)
```
Animation always plays close to normal speed
Avoids visual drift while still subtly reacting to movement








20250325
DONE * Working in branch "node-type-changes" to change player bullets, enemy arrows, crates, etc. to node types that will work with physics bouncing.

DONE * See if we can make a common parent for all Spawners.

DONE * Bats are colliding with other Enemies and pushing them. They should go right over the top of all obstacles and characters when flying towards Player target.

DONE * Player Bullets are not colliding with Enemy Spawners, so they cannot be damaged or destroyed.

DONE * set collision_layer and collision_mask in "_ready()" function for objects, instead of relying only on the inspector. Use GLOBALS.[layernames] with pipe | operator.
** And cgpt asks "Let me know if you‚Äôd like help defining common mask combinations in Globals.gd too (e.g., MASK_PROJECTILE_HITBOX, MASK_CRATE_BLOCKERS, etc.)."

DONE * player cannot fire in different directions

DONE * player shots do not bounce off crate, but simply stick to the side until their lifespan expires and they remove themselves.

DONE * player shots do not damage enemy bats or enemy ghosts, but they bounce off.
** They do not bounce off, and seem to damage bats and ghosts.

DONE * Player cannot drop the crate.
** Some sort of issue with null value on crate reference when trying to drop the crate.

DONE * After picking up the crate, I can carry it. The first time I try to drop the crate, it drops a Crate_Static, but the player is still carrying the Crate_Carried. I cannot do any more crate drops after that.

DONE * While carrying a crate, the player should not fire any shots. Shot firing direction input will only be used to potentially drop the carried crate.

DONE * We told Bullet.gd not to worry about body_entered with enemies, SO we need all enemy collisions to manage this. We first did this with the Bat collisions.
** Oh, we have the same situation with on_area_entered in Bullet with enemies.
** So, we will let Enemies manage the collision with Player bullets.

BUG? * At one point while testing the bat, I noticed when the bat collided with the player, and then switched into wandering mode , it caused the player to move in sync with the wandering bat. That was weird and only happened one time. 








20250322
DONE * Adding Crates
NOTE * There are other things fro 20250319 that need moved up. I will do that after managing Crates.








20250321 (Carried over from 20250320

20250319
DONE * Resized from 128px sprites to 32px.
** Happy accident: Regular skeletons can now find their way around walls. I think the change of scale allowed their movements to scale 4x and make a difference.








DONE * Adding Skeleton Shooter
?? When skeletons are blocked by wall, should they be still trying to go towards player?
?? It seems like the skeleton is trying to shoot at the player even when there is a wall in the way. We are supposed to be testing for line of sight.
** Is wandering is only when they are FAR from the player and blocked vision

DONE * Add Bat

DONE * Give names to the layers for Collision Layer and Mask, instead of numbers.









20250318
DONE * Implement the Nova shot, which is based on gem_power the Player has collected.

DONE * We might need Gems to be in a group other than "powerups" to differentiate them from shot powerups and health powerups.

DONE * Add powerups for player
We're going to work on adding weapon powerups for the player. Weapon powerups are stackable, meaning their effects are cumulative.
The Big Shot Powerup increases the size of the players bullet, doubles the bullets health, and doubles the bullets damage. 

DONE * Need a HUD indicator for what powerups we have.








=================================
Character Properties

Ghost
	health = 2
	base_speed = 75
	score_value = 1
	damage = 1

Skeleton
	health = 4  # Skeletons are tougher than Ghosts
	speed = 80.0  # Skeletons move slower
	score_value = 2
	damage = 2

Skeleton Shooter
	health = 4  # Skeletons are tougher than Ghosts
	speed = 80.0  # Skeletons move slower
	score_value = 4
	damage = 2

Zombie
	health = 8  # Zombies have higher health
	base_speed = 40.0  # Zombies are slower
	score_value = 4
	damage = 4  # Zombies deal high melee damage








202250317
DONE * I think we have bullets working right now. We are not using Area2D hitbox in the Player or Enemies now. That was to allow for a separate melee hitbox different from movement collisions, but that is not something I want in this game. For instance, we could have a hitbox for the head and a different one for the body. Not needed.

DONE * Now we have the problem again where the enemies all run over the top of each other.
** Enemies just needed their layer specified in Collision > Mask

DONE * Are all enemies awarding score when destroyed?
** fixed by having take_damage only in BaseEnemy, and init score_value in _ready

DONE * Also, the skeleton movement isn't really working the way I want. I asked ChatGPT about that, also.
** Okay, what we have now is sort of better, but not shippable.

DONE * I think player bullets are only hitting with "1" hard-coded amount of damage.
** Now in Bullet.gd, uses damage and stuff

DONE * What is limit of total player shots?

DONE * Implement gems being dropped by enemies upon death.
** Gems are dropped for "lifespan," and they blink halfway through, before disappearing. Player can collect gems, and HUD is updated correctly.









20250316
TEST * Yesterday asked ChatGPT about the 4 enemy character scripts, optimizations. Answer is waiting for me.

20250315
DONE * Are skeletons able to damage player with melee??

DONE * I think Ghost.gd has a lot of logic that could go in BaseEnemy.gd??

DONE * Need to make sure player is damaging ghost enemies during melee.

DONE * Fix Enemy with high health; during melee; getting stuck on player.








20250314
DONE * I would like to keep enemies from running over the top of each other.
** This works for Ghosts and Zombies, who use dumb movement, but not for Skeletons. Still working on it.
** "jitter" doesn't really seem to happen at all?
** Solution seemed to be making the collision shapes larger to fit the sprites more appropriately.








20250313
DONE * Add Skeleton enemy and SkeletonSpawner

DONE * Add Zombie enemy and ZombieSpawner

DONE * Add more walls into the demo room for testing.

DONE * Skeleton needs AI that lets it find player around walls.
** Using what we call "Basic Wall Avoidance" with Raycasts.

DONE * I would like to keep enemies from running over the top of each other.
** This works for Ghosts and Zombies, who use dumb movement, but not for Skeletons. Still working on it.
** "jitter" doesn't really seem to happen at all?
** Solution seemed to be making the collision shapes larger to fit the sprites more appropriately.








20250312
DONE * Implement BaseClass for enemies.
DONE * Subclass existing Ghost enemy.








20250311
DONE * Next thing to do is make bullets die when they hit walls in the room.
DONE * 2. Displaying Player Score in the GUI
DONE * Show healthbar above player
DONE * Allow more ghosts at one time.
** I set it to 15 or 25
DONE * I don't think destroying the ghost spawner actually awarded the points to the player








=========================================================
## Resources
=========================================================
* Good tilesetlayer video, including z-index so you can walk behind top of trees:
https://www.youtube.com/watch?v=43sJIWaj2Yw








=========================================================
## Layers
=========================================================
1: Player
2: Player bullet
3: Ghost (presumably most enemies)
4: Spawners
5: Walls (blockers in general?)
6: Powerups (Gems, weapon powerups, health powerups)
7: Enemy Shots (enemy_projecctile)
8: Crates

When setting Collision Masks and Collision Layers in code, we can make it more intuitive:
```
üí° Pro Tip: Define named constants for clarity
In a global constants script or at the top of your script:
```
const LAYER_CRATE = 128
const LAYER_PLAYER = 1
```
Then use:
```
set_deferred("collision_layer", LAYER_CRATE)
```
Makes debugging and refactoring way easier later.
```
** So, we are using that, but will need later to update that for numerous objects.
```
For all dynamic objects (bullets, crates, enemies, powerups), define layers/masks in _ready() or init() to guarantee correct behavior across scenes and versions.

Let me know if you want help batch-updating those or verifying masks in a scene.
```









===============================================================
## Ordering / Z Index
0: I presume this is the TileMap
1: I have assigned almost everything to this Z index for now









=================================================================
## Collision Decisions
?? Who should manage collisions?
From a ChatGPT:
```
Option 2: Targets Handle Being Hit
"The thing that gets hit decides what to do when it's hit."
‚úÖ Cleaner, scalable (especially for enemies that behave differently)
‚úÖ Keeps bullet logic minimal: just notify or signal hit, then vanish
‚úÖ Great when enemies have their own health, resistances, effects, etc.
üö´ Slightly more setup (signal wiring, or area_entered detection on enemies)
```
So, this means between a bullet and an enemy, the enemy will manage the hit, for example.








=========================================================
Character and object properties:
=========================================================
Characters (Player, Enemies)
* base_speed: how fast can the object normally move. This is a property set for the object at instantiation. Actual speed at any given point in the game can be affected by other factors, such as slowing down while walking through mud, or speeding up when possessing a speed-boosting powerup.
* base_fire_rate: affects cooldown between each bullet fired from ranged weapon
* max_shots_in_level: determines how many bullets fired from the player can exist in the game level at any given time.
* power: how much damage does the object do during a collision with another object
* max_health: how much health the object starts out with
* health: tracks current health of the object. At 0, the object dies. Starts out at max_health.

Characters (Enemies Only)
* score_value: how much score is awarded to the player when the object is destroyed

Bullets
* lifespan: how long does the object live before automatic destruction
* power: how much damage does the object do during a collision with another object
* max_health: how much health the object starts out with
* health: tracks current health of the object. At 0, the object dies. Starts out at max_health.
* base_speed: how fast can the object normally move. This is a property set for the object at instantiation. Actual speed at any given point in the game can be affected by other factors, such as slowing down while walking through mud, or speeding up when possessing a speed-boosting powerup.

Enemy Spawners
* spawn_interval: how frequently does the spawner attempt a roll of the dice to potentially spawn a new enemy
* max_health: how much health the object starts out with
* health: tracks current health of the object. At 0, the object dies. Starts out at max_health.
* score_value: how much score is awarded to the player when the object is destroyed

Global
* max_ghosts
* max_skeletons
* max_{enemy_type}








=========================================================
== Optimizations
=========================================================
1. Using a pool of instances that is initialized at game startup, then moved off screen or whatever rather than deleted when the ghost / etc is destroyed. Idea is to save the overhead of allocating new instances. Is this helpful?

2. Something with Tile collisions. Instead of a collision box for every 64x64 tile, can we have a collision box, and stretch it into a rectangle over a long span of boxes? Is this helpful?







=========================================================
== 20250319 ChatGPT Questions
=========================================================
What‚Äôs Next?
Since you‚Äôre refining and adding features, do you have any particular areas where you need guidance or improvements? Here are a few potential areas of focus:

1. Enemy AI Enhancements
The enemies have a good foundation, but do you want to improve pathfinding, dodging behavior, or introduce more complex attack patterns?

Skeleton Shooters already sidestep after firing, but what about smarter decision-making (e.g., moving to cover or leading shots)?

2. Player Feedback & Game Feel
The game already has great mechanics, but how about improving hit effects? Adding:

Screen shake when the player takes damage.

Flash effects on enemies when they get hit.

Sound cues for different enemy types.

Nova Shot‚Äôs expansion speed and health mechanics are interesting‚Äîwould you like a more dynamic animation to accompany it?

3. Difficulty Scaling & Balance
Your design document mentions enemy health scaling after level loops. Do you want enemies to scale gradually over time or in distinct waves?

Should power-ups be time-limited, or should there be a way to stack/degrade them over time?

4. Level & Spawner Design
Right now, spawners are timed and limited in count, but do you want enemies to spawn based on player position, score, or progression?

Maybe add boss waves or special enemy types that trigger under specific conditions?

5. Performance Optimizations
The bullet system looks clean, but does it need object pooling for efficiency?

Would you like collision layers tweaked for performance?

The raycast-based enemy line-of-sight checks are good, but are they causing any performance bottlenecks?







====================================================
== Philosophy? Game Design?
====================================================
1. Make the basic gameplay mechanics:
a. Player movement, firing, powerup weapons, and overpower weapons.
b. All basic enemies (just no bosses)
c. All basic obstacles (walls)
d. All important special game pieces (crates, barrels)

2. Now, how does it feel?

3. Fix anything big time broken.

4. Maybe it is time to launch steam page with trailer?

5. Now add bigger goals like saving a princess, upgrade tokens to find for completionist, maybe there are a few other things? Careful about scope creep.

6. Make sure UI is working and good

7. Design a zillion levels

8. Make sure there is a trophy system / achievements

9. what else before launch?
